// build.rs
use std::fs;
use std::path::Path;

fn main() {
    // Rerun build script if the generated stub changes
    println!("cargo:rerun-if-changed=../../bin/test-function-call.s");
    // Input stub generated by the compiler
    let in_path = "../../bin/test-function-call.s";
    // Determine an output file in OUT_DIR to avoid mutating the original
    let out_dir = "../../bin";
    let out_path = Path::new(&out_dir).join("test-function-call.patched.s");
    // Read and patch: rename the global symbol and label
    let asm = fs::read_to_string(in_path).expect("Failed to read assembly");
    let patched = asm
        .replace(".globl _main", ".globl _test")
        .replace("_main:", "_test:");
    fs::write(&out_path, patched).expect("Failed to write patched assembly");
    // Compile the patched stub into a static library
    cc::Build::new()
        .file(out_path.to_str().unwrap()) // Patched assembly file
        .compile("foo_lib"); // Library name
}
